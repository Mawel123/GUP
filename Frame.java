
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Mawel
 */
public class Frame extends javax.swing.JFrame implements PropertyChangeListener {

    protected Simulation simulation;
    protected String eventFlagPosition = "";

    /**
     * Creates new form Field
     */
    public Frame() {
        super();
        initComponents();

        simulation = new Simulation(animation);
        animation.setPaintClient(simulation);
        simulation.addPropertyChangeListener(this);
        numberfieldVelRunner.setText(String.format("%6.2f", simulation.stepLengthRunner * 100));
        numberfieldVelChaserBlue.setText(String.format("%6.2f", simulation.stepLengthChaserBlue * 100));
        numberfieldVelChaserRed.setText(String.format("%6.2f", simulation.stepLengthChaserRed * 100));

        sliderVelRunner.setValue(10);
        sliderVelChaserBlue.setValue(10);
        sliderVelChaserRed.setValue(10);

        numberfieldAnimationScale.setText(String.format("%6.2f", simulation.animationScale));
        animation.repaint();
        simulation.init();
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        //on hit
        if (evt.getPropertyName().equals("hit")) {
            simulation.stop();
            buttonOnOff.setEnabled(false);
            buttonReset.setEnabled(true);
            simulation.mouseControlEnabled = false;
            simulation.paintRunnerDirection = false;
            simulation.paintRunnerDirectionDone = false;
            animation.repaint();
            if (buttonOnOff.getText()
                    .equals("STOP")) {
                buttonOnOff.setText("START");
            }
        }

        Vector v;
        if (evt.getPropertyName().equals("nextRunner")) {
            v = (Vector) evt.getNewValue();
            numberfieldPosRunnerY.setText("" + String.format("%6.2f", v.y));
            numberfieldPosRunnerX.setText("" + String.format("%6.2f", v.x));
        }

        if (evt.getPropertyName().equals("nextChaserBlue")) {
            v = (Vector) evt.getNewValue();
            numberfieldPosChaserBlueX.setText("" + String.format("%6.2f", v.x));
            numberfieldPosChaserBlueY.setText("" + String.format("%6.2f", v.y));
        }

        if (evt.getPropertyName().equals("nextChaserRed")) {
            v = (Vector) evt.getNewValue();
            numberfieldPosChaserRedX.setText("" + String.format("%6.2f", v.x));
            numberfieldPosChaserRedY.setText("" + String.format("%6.2f", v.y));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        Field = new javax.swing.JPanel();
        animation = new JMath();
        ui = new javax.swing.JPanel();
        buttonReset = new javax.swing.JButton();
        buttonOnOff = new javax.swing.JButton();
        checkboxChaserBlue = new javax.swing.JCheckBox();
        checkboxChaserRed = new javax.swing.JCheckBox();
        buttonPosRunner = new javax.swing.JButton();
        buttonPosChaserBlue = new javax.swing.JButton();
        buttonPosChaserRed = new javax.swing.JButton();
        numberfieldPosRunnerY = new JNumberField();
        numberfieldPosRunnerX = new JNumberField();
        numberfieldPosChaserBlueX = new JNumberField();
        numberfieldPosChaserBlueY = new JNumberField();
        numberfieldPosChaserRedX = new JNumberField();
        numberfieldPosChaserRedY = new JNumberField();
        jLabel1 = new javax.swing.JLabel();
        numberfieldVelRunner = new JNumberField();
        numberfieldVelChaserBlue = new JNumberField();
        numberfieldVelChaserRed = new JNumberField();
        comboBoxForm = new javax.swing.JComboBox<>();
        numberfieldAnimationScale = new JNumberField();
        jLabel4 = new javax.swing.JLabel();
        sliderVelRunner = new javax.swing.JSlider();
        sliderVelChaserBlue = new javax.swing.JSlider();
        sliderVelChaserRed = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        sliderAnimationScale = new javax.swing.JSlider();
        checkboxMouseControl = new javax.swing.JCheckBox();
        checkboxRiver = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Field.setLayout(new java.awt.BorderLayout());

        animation.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        animation.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                animationMouseMoved(evt);
            }
        });
        animation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                animationMouseClicked(evt);
            }
        });
        animation.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                animationComponentResized(evt);
            }
        });
        Field.add(animation, java.awt.BorderLayout.CENTER);

        ui.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ui.setLayout(new java.awt.GridBagLayout());

        buttonReset.setText("RESET");
        buttonReset.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        buttonReset.setEnabled(false);
        buttonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonResetActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        ui.add(buttonReset, gridBagConstraints);

        buttonOnOff.setText("START");
        buttonOnOff.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        buttonOnOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOnOffActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        ui.add(buttonOnOff, gridBagConstraints);

        checkboxChaserBlue.setSelected(true);
        checkboxChaserBlue.setIconTextGap(0);
        checkboxChaserBlue.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkboxChaserBlueItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        ui.add(checkboxChaserBlue, gridBagConstraints);

        checkboxChaserRed.setSelected(true);
        checkboxChaserRed.setIconTextGap(0);
        checkboxChaserRed.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkboxChaserRedItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        ui.add(checkboxChaserRed, gridBagConstraints);

        buttonPosRunner.setText("Ziel");
        buttonPosRunner.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Position", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        buttonPosRunner.setIconTextGap(0);
        buttonPosRunner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPosRunnerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 5;
        ui.add(buttonPosRunner, gridBagConstraints);

        buttonPosChaserBlue.setText("Verfolger Blau");
        buttonPosChaserBlue.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Position", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        buttonPosChaserBlue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPosChaserBlueActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 5;
        ui.add(buttonPosChaserBlue, gridBagConstraints);

        buttonPosChaserRed.setText("Verfolger Rot");
        buttonPosChaserRed.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Position", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        buttonPosChaserRed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPosChaserRedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 5;
        ui.add(buttonPosChaserRed, gridBagConstraints);

        numberfieldPosRunnerY.setEditable(false);
        numberfieldPosRunnerY.setColumns(4);
        numberfieldPosRunnerY.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 0, 2);
        ui.add(numberfieldPosRunnerY, gridBagConstraints);

        numberfieldPosRunnerX.setEditable(false);
        numberfieldPosRunnerX.setColumns(4);
        numberfieldPosRunnerX.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 0, 2);
        ui.add(numberfieldPosRunnerX, gridBagConstraints);

        numberfieldPosChaserBlueX.setEditable(false);
        numberfieldPosChaserBlueX.setColumns(4);
        numberfieldPosChaserBlueX.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 0, 2);
        ui.add(numberfieldPosChaserBlueX, gridBagConstraints);

        numberfieldPosChaserBlueY.setEditable(false);
        numberfieldPosChaserBlueY.setColumns(4);
        numberfieldPosChaserBlueY.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 0, 2);
        ui.add(numberfieldPosChaserBlueY, gridBagConstraints);

        numberfieldPosChaserRedX.setEditable(false);
        numberfieldPosChaserRedX.setColumns(4);
        numberfieldPosChaserRedX.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 0, 2);
        ui.add(numberfieldPosChaserRedX, gridBagConstraints);

        numberfieldPosChaserRedY.setEditable(false);
        numberfieldPosChaserRedY.setColumns(4);
        numberfieldPosChaserRedY.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 0, 2);
        ui.add(numberfieldPosChaserRedY, gridBagConstraints);

        jLabel1.setText("Geschwindigkeit:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        ui.add(jLabel1, gridBagConstraints);

        numberfieldVelRunner.setEditable(false);
        numberfieldVelRunner.setColumns(4);
        numberfieldVelRunner.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 18;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 0, 7);
        ui.add(numberfieldVelRunner, gridBagConstraints);

        numberfieldVelChaserBlue.setEditable(false);
        numberfieldVelChaserBlue.setColumns(4);
        numberfieldVelChaserBlue.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 18;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 0, 7);
        ui.add(numberfieldVelChaserBlue, gridBagConstraints);

        numberfieldVelChaserRed.setEditable(false);
        numberfieldVelChaserRed.setColumns(4);
        numberfieldVelChaserRed.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 18;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 0, 7);
        ui.add(numberfieldVelChaserRed, gridBagConstraints);

        comboBoxForm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gerade", "Sinus", "Kreis" }));
        comboBoxForm.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxFormItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        ui.add(comboBoxForm, gridBagConstraints);

        numberfieldAnimationScale.setColumns(4);
        numberfieldAnimationScale.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        ui.add(numberfieldAnimationScale, gridBagConstraints);

        jLabel4.setText("Maßstab:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 8, 0, 0);
        ui.add(jLabel4, gridBagConstraints);

        sliderVelRunner.setMajorTickSpacing(10);
        sliderVelRunner.setMinorTickSpacing(2);
        sliderVelRunner.setPaintTicks(true);
        sliderVelRunner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderVelRunnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        ui.add(sliderVelRunner, gridBagConstraints);

        sliderVelChaserBlue.setMajorTickSpacing(10);
        sliderVelChaserBlue.setMinorTickSpacing(2);
        sliderVelChaserBlue.setPaintTicks(true);
        sliderVelChaserBlue.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderVelChaserBlueStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        ui.add(sliderVelChaserBlue, gridBagConstraints);

        sliderVelChaserRed.setMajorTickSpacing(10);
        sliderVelChaserRed.setMinorTickSpacing(2);
        sliderVelChaserRed.setPaintTicks(true);
        sliderVelChaserRed.setToolTipText("");
        sliderVelChaserRed.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        sliderVelChaserRed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderVelChaserRedStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        ui.add(sliderVelChaserRed, gridBagConstraints);

        jLabel5.setText("x:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        ui.add(jLabel5, gridBagConstraints);

        jLabel8.setText("y:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        ui.add(jLabel8, gridBagConstraints);

        jSeparator1.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        ui.add(jSeparator1, gridBagConstraints);

        sliderAnimationScale.setMajorTickSpacing(10);
        sliderAnimationScale.setMaximum(50);
        sliderAnimationScale.setMinimum(10);
        sliderAnimationScale.setMinorTickSpacing(1);
        sliderAnimationScale.setPaintTicks(true);
        sliderAnimationScale.setValue(10);
        sliderAnimationScale.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderAnimationScaleStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        ui.add(sliderAnimationScale, gridBagConstraints);

        checkboxMouseControl.setText("Maussteuerung");
        checkboxMouseControl.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkboxMouseControlItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        ui.add(checkboxMouseControl, gridBagConstraints);

        checkboxRiver.setSelected(true);
        checkboxRiver.setText("Fluss");
        checkboxRiver.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkboxRiverItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 18;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        ui.add(checkboxRiver, gridBagConstraints);

        Field.add(ui, java.awt.BorderLayout.SOUTH);

        getContentPane().add(Field, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void uiSetRunning() {
        buttonReset.setEnabled(false);
        buttonPosRunner.setEnabled(false);
        buttonPosChaserBlue.setEnabled(false);
        buttonPosChaserRed.setEnabled(false);
        comboBoxForm.setEnabled(false);
        sliderVelRunner.setEnabled(false);
        sliderVelChaserBlue.setEnabled(false);
        sliderVelChaserRed.setEnabled(false);
        numberfieldAnimationScale.setEnabled(false);
        checkboxMouseControl.setEnabled(false);
        sliderAnimationScale.setEnabled(false);
    }

    public void uiSetNotRunning() {
        if (simulation.dataRunner.size() < 2) {
            buttonReset.setEnabled(false);
            buttonPosRunner.setEnabled(true);
            comboBoxForm.setEnabled(true);
            sliderVelRunner.setEnabled(true);
            sliderVelChaserBlue.setEnabled(true);
            sliderVelChaserRed.setEnabled(true);
            sliderAnimationScale.setEnabled(true);
            if (checkboxChaserBlue.isSelected()) {
                buttonPosChaserBlue.setEnabled(true);
            } else {
                buttonPosChaserBlue.setEnabled(false);
            }
            if (checkboxChaserRed.isSelected()) {
                buttonPosChaserRed.setEnabled(true);
            } else {
                buttonPosChaserRed.setEnabled(false);
            }
        } else if (simulation.dataRunner.size() == 1) {
            comboBoxForm.setEnabled(true);
            sliderVelRunner.setEnabled(true);
            sliderVelChaserBlue.setEnabled(true);
            sliderVelChaserRed.setEnabled(true);
            sliderAnimationScale.setEnabled(true);
            sliderAnimationScale.setEnabled(false);
        } else {
            buttonReset.setEnabled(true);
            buttonPosRunner.setEnabled(false);
            buttonPosChaserBlue.setEnabled(false);
            buttonPosChaserRed.setEnabled(false);
            comboBoxForm.setEnabled(false);
            sliderVelRunner.setEnabled(false);
            sliderVelChaserBlue.setEnabled(false);
            sliderVelChaserRed.setEnabled(false);
            sliderAnimationScale.setEnabled(false);
        }
        buttonOnOff.setEnabled(true);
        checkboxMouseControl.setEnabled(true);
    }

    protected Vector frameToMath(Vector coordinates) {
        double x = coordinates.x;
        double y = coordinates.y;
        double mx = (x * ((x - (animation.getWidth() / 2)) / x)) / animation.getUnit();
        double my = -(y * ((y - (animation.getHeight() / 2)) / y)) / animation.getUnit();

        return new Vector(mx, my);
    }

    private void buttonOnOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOnOffActionPerformed
        if (simulation.next == false) {
            if (buttonOnOff.getText().equals("START")) {
                buttonOnOff.setText("STOP");
                uiSetRunning();
            }
            if (simulation.dataRunner.size() < 2) {
                simulation.init();
            }
            simulation.start();
        } else if (simulation.next == true) {
            simulation.stop();
            if (buttonOnOff.getText().equals("STOP")) {
                buttonOnOff.setText("START");
                uiSetNotRunning();
            }
        }
        if (simulation.paintRunnerDirection && !simulation.mouseControlEnabled) {
            simulation.paintRunnerDirection = false;
            simulation.paintRunnerDirectionDone = true;
        }
        checkboxMouseControl.setEnabled(false);
    }//GEN-LAST:event_buttonOnOffActionPerformed

    private void buttonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetActionPerformed
        simulation.reset();
        simulation.init();
        comboBoxForm.setSelectedItem("Gerade");
        checkboxMouseControl.setSelected(false);
        uiSetNotRunning();
        buttonReset.setEnabled(false);

        numberfieldVelRunner.setText(String.format("%6.2f", (sliderVelRunner.getValue() * 0.1)));
        sliderVelRunner.setValue(10);
        sliderVelChaserBlue.setValue(10);
        sliderVelChaserRed.setValue(10);
    }//GEN-LAST:event_buttonResetActionPerformed

    private void buttonPosRunnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPosRunnerActionPerformed
        eventFlagPosition = "pos_r";
    }//GEN-LAST:event_buttonPosRunnerActionPerformed

    private void buttonPosChaserBlueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPosChaserBlueActionPerformed
        eventFlagPosition = "pos_cb";
    }//GEN-LAST:event_buttonPosChaserBlueActionPerformed

    private void buttonPosChaserRedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPosChaserRedActionPerformed
        eventFlagPosition = "pos_cr";
    }//GEN-LAST:event_buttonPosChaserRedActionPerformed

    private void checkboxChaserBlueItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkboxChaserBlueItemStateChanged
        if (checkboxChaserBlue.isSelected()) {
            simulation.chaserBlueEnabled = true;
            if (simulation.dataChaserRed.size() < 2) {
                buttonPosChaserBlue.setEnabled(true);
            } else {
                buttonPosChaserBlue.setEnabled(false);
            }
        } else {
            simulation.chaserBlueEnabled = false;
            buttonPosChaserBlue.setEnabled(false);
        }
        animation.repaint();
    }//GEN-LAST:event_checkboxChaserBlueItemStateChanged

    private void checkboxChaserRedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkboxChaserRedItemStateChanged
        if (checkboxChaserRed.isSelected()) {
            simulation.chaserRedEnabled = true;
            if (simulation.dataChaserRed.size() < 2) {
                buttonPosChaserRed.setEnabled(true);
            } else {
                buttonPosChaserRed.setEnabled(false);
            }
        } else {
            simulation.chaserRedEnabled = false;
            buttonPosChaserRed.setEnabled(false);
        }
        animation.repaint();
    }//GEN-LAST:event_checkboxChaserRedItemStateChanged

    private void comboBoxFormItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxFormItemStateChanged
        simulation.runnerMode = comboBoxForm.getSelectedItem().toString();
        if (comboBoxForm.getSelectedItem().equals("Gerade") && checkboxMouseControl.isSelected()) {
            sliderVelRunner.setEnabled(false);
        } else {
            sliderVelRunner.setEnabled(true);
        }
        animation.repaint();
    }//GEN-LAST:event_comboBoxFormItemStateChanged

    private void sliderVelChaserRedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderVelChaserRedStateChanged
        simulation.stepLengthChaserRed = sliderVelChaserRed.getValue() * 0.1 * 0.01;
        numberfieldVelChaserRed.setText(String.format("%6.2f", (sliderVelChaserRed.getValue() * 0.1)));
        buttonReset.setEnabled(true);
    }//GEN-LAST:event_sliderVelChaserRedStateChanged

    private void sliderVelChaserBlueStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderVelChaserBlueStateChanged
        simulation.stepLengthChaserBlue = sliderVelChaserBlue.getValue() * 0.1 * 0.01;
        numberfieldVelChaserBlue.setText(String.format("%6.2f", (sliderVelChaserBlue.getValue() * 0.1)));
        buttonReset.setEnabled(true);
    }//GEN-LAST:event_sliderVelChaserBlueStateChanged

    private void sliderVelRunnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderVelRunnerStateChanged
        simulation.stepLengthRunner = sliderVelRunner.getValue() * 0.1 * 0.01;
        numberfieldVelRunner.setText(String.format("%6.2f", (sliderVelRunner.getValue() * 0.1)));
        buttonReset.setEnabled(true);
    }//GEN-LAST:event_sliderVelRunnerStateChanged

    private void animationMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_animationMouseMoved
        if (simulation.paintRunnerDirection) {
            setStartingDirection(evt);
        }
    }//GEN-LAST:event_animationMouseMoved

    private void animationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_animationMouseClicked
        if (simulation.paintRunnerDirection && !simulation.mouseControlEnabled) {
            simulation.paintRunnerDirection = false;
            simulation.paintRunnerDirectionDone = true;
        }
        setStartingPosition(evt);
    }//GEN-LAST:event_animationMouseClicked

    private void animationComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_animationComponentResized
        simulation.init();
        animation.repaint();
    }//GEN-LAST:event_animationComponentResized

    private void checkboxMouseControlItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkboxMouseControlItemStateChanged
        if (checkboxMouseControl.isSelected()) {
            simulation.mouseControlEnabled = true;
            simulation.paintRunnerDirection = true;
            if (!comboBoxForm.getSelectedItem().toString().equals("Gerade")) {
                sliderVelRunner.setEnabled(true);
            } else {
                sliderVelRunner.setEnabled(false);
            }
        } else {
            sliderVelRunner.setEnabled(true);
            simulation.mouseControlEnabled = false;
            simulation.paintRunnerDirection = false;
            animation.repaint();
        }
    }//GEN-LAST:event_checkboxMouseControlItemStateChanged

    private void sliderAnimationScaleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderAnimationScaleStateChanged
        simulation.animationScale = sliderAnimationScale.getValue() * 0.1;
        simulation.radius = sliderAnimationScale.getValue() * 0.1 * 0.025 + 0.1475;
        numberfieldAnimationScale.setText(String.format("%6.2f", sliderAnimationScale.getValue() * 0.1));
        simulation.reset();
        simulation.init();

    }//GEN-LAST:event_sliderAnimationScaleStateChanged

    private void checkboxRiverItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkboxRiverItemStateChanged
        if (checkboxRiver.isSelected()) {
            simulation.riverEnabled = true;
        } else {
            simulation.riverEnabled = false;
        }
        animation.repaint();
    }//GEN-LAST:event_checkboxRiverItemStateChanged

    private Vector trimMouseXYtoAnimationBoudaries(final MouseEvent evt) {
        int x = evt.getX();
        int y = evt.getY();
        if (x >= animation.getWidth()) {
            x = animation.getWidth();
        } else if (evt.getX() <= 0) {
            x = -animation.getWidth();
        }
        if (y >= animation.getHeight()) {
            y = animation.getHeight();
        } else if (evt.getY() <= 0) {
            y = -animation.getHeight();
        }
        return new Vector(x, y);
    }

    private void setStartingDirection(final MouseEvent evt) {
        Vector direction;
        if (simulation.paintRunnerDirection) {
            direction = frameToMath(trimMouseXYtoAnimationBoudaries(evt)); // }:o[
            simulation.runnerDirectionLine.x1 = simulation.dataRunner.get(simulation.dataRunner.size() - 1).x;
            simulation.runnerDirectionLine.y1 = simulation.dataRunner.get(simulation.dataRunner.size() - 1).y;
            simulation.runnerDirectionLine.x2 = direction.x;
            simulation.runnerDirectionLine.y2 = direction.y;
            if (simulation.mouseControlEnabled && comboBoxForm.getSelectedItem().equals("Gerade")) {
                Double stepLength = Math.abs(Vector.length(new Vector(simulation.runnerDirectionLine.x1 - simulation.runnerDirectionLine.x2,
                        simulation.runnerDirectionLine.y1 - simulation.runnerDirectionLine.y2)));
                if (stepLength > 10.0) {
                    stepLength = 10.0;
                } else if (stepLength < 0.01) {
                    stepLength = 0.01;
                }
                simulation.stepLengthRunner = stepLength * 0.01;
                numberfieldVelRunner.setText(String.format("%6.2f", stepLength));
            }
            animation.repaint();
        }
    }

    private void setStartingPosition(final MouseEvent evt) {
        Vector coordinate = new Vector(evt.getX(), evt.getY());
        if (eventFlagPosition.equals("pos_r")) {
            addVectorToList(simulation.dataRunner, coordinate);
            simulation.paintRunnerDirection = true;
            setStartingDirection(evt);
            buttonReset.setEnabled(true);
        } else if (eventFlagPosition.equals("pos_cb")) {
            addVectorToList(simulation.dataChaserBlue, coordinate);
            buttonReset.setEnabled(true);
        } else if (eventFlagPosition.equals("pos_cr")) {
            addVectorToList(simulation.dataChaserRed, coordinate);
            buttonReset.setEnabled(true);
        }
        sliderAnimationScale.setEnabled(false);
        simulation.fireCoordinateChange();
        eventFlagPosition = "";
    }

    private void addVectorToList(ArrayList<Vector> vectorList, Vector coordinate) {
        if (vectorList.isEmpty()) {
            vectorList.add(frameToMath(coordinate));
        } else {
            vectorList.set(0, frameToMath(coordinate));
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Field;
    private JMath animation;
    private javax.swing.JButton buttonOnOff;
    private javax.swing.JButton buttonPosChaserBlue;
    private javax.swing.JButton buttonPosChaserRed;
    private javax.swing.JButton buttonPosRunner;
    private javax.swing.JButton buttonReset;
    private javax.swing.JCheckBox checkboxChaserBlue;
    private javax.swing.JCheckBox checkboxChaserRed;
    private javax.swing.JCheckBox checkboxMouseControl;
    private javax.swing.JCheckBox checkboxRiver;
    private javax.swing.JComboBox<String> comboBoxForm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JSeparator jSeparator1;
    private JNumberField numberfieldAnimationScale;
    private JNumberField numberfieldPosChaserBlueX;
    private JNumberField numberfieldPosChaserBlueY;
    private JNumberField numberfieldPosChaserRedX;
    private JNumberField numberfieldPosChaserRedY;
    private JNumberField numberfieldPosRunnerX;
    private JNumberField numberfieldPosRunnerY;
    private JNumberField numberfieldVelChaserBlue;
    private JNumberField numberfieldVelChaserRed;
    private JNumberField numberfieldVelRunner;
    private javax.swing.JSlider sliderAnimationScale;
    private javax.swing.JSlider sliderVelChaserBlue;
    private javax.swing.JSlider sliderVelChaserRed;
    private javax.swing.JSlider sliderVelRunner;
    private javax.swing.JPanel ui;
    // End of variables declaration//GEN-END:variables

}
